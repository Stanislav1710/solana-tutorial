from solders.pubkey import Pubkey
from Wallet import load_wallet
from Connect import get_connection
from solana.rpc.types import TokenAccountOpts
from bip_utils import base58
import struct


def get_sol_balance(pubkey: Pubkey, network="devnet") -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å SOL –≤ –∫–æ—à–µ–ª—å–∫–µ.
    """
    client = get_connection(network)
    resp = client.get_balance(pubkey)
    if resp.value is not None:
        return resp.value / 1_000_000_000  # –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –ª–∞–º–ø–æ—Ä—Ç–æ–≤ –≤ SOL
    return 0.0


def get_token_name_by_mint(mint_address: str, network="devnet"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ –µ–≥–æ mint-–∞–¥—Ä–µ—Å—É.
    """
    # –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Solana (mainnet)
    MAINNET_TOKENS = {
        "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": {"symbol": "USDC", "name": "USD Coin"},
        "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": {"symbol": "USDT", "name": "Tether USD"},
        "So11111111111111111111111111111111111111112": {"symbol": "wSOL", "name": "Wrapped SOL"},
        "SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt": {"symbol": "SRM", "name": "Serum"},
        "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R": {"symbol": "RAY", "name": "Raydium"},
        "kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6": {"symbol": "KIN", "name": "Kin"},
        "MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K": {"symbol": "MER", "name": "Mercurial"},
        "9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E": {"symbol": "BTC", "name": "Bitcoin (Wrapped)"},
        "2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk": {"symbol": "ETH", "name": "Ethereum (Wrapped)"},
        "AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3": {"symbol": "FTT", "name": "FTX Token"},
    }

    # Devnet —Ç–æ–∫–µ–Ω—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    DEVNET_TOKENS = {
        # –î–æ–±–∞–≤—å—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ devnet —Ç–æ–∫–µ–Ω—ã –∑–¥–µ—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    token_list = MAINNET_TOKENS if network == "mainnet-beta" else DEVNET_TOKENS
    token_list.update(MAINNET_TOKENS)  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º mainnet —Ç–æ–∫–µ–Ω—ã

    if mint_address in token_list:
        return token_list[mint_address]

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π mint
    return {"symbol": f"{mint_address[:4]}...{mint_address[-4]}", "name": f"Unknown Token"}


def parse_token_account_data(data):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç mint-–∞–¥—Ä–µ—Å –∏—Å–ø–æ–ª—å–∑—É—è bip_utils.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        # Mint address –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–º–µ—â–µ–Ω–∏—é 0, –¥–ª–∏–Ω–∞ 32 –±–∞–π—Ç–∞
        if len(data) >= 32:
            mint_bytes = data[:32]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º base58 –∏–∑ bip_utils
            mint_address = base58.Base58Encoder.Encode(mint_bytes)
            return mint_address
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")

    return None


def get_spl_tokens(pubkey: Pubkey, network="devnet"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ SPL-—Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    client = get_connection(network)
    tokens = []

    TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")

    # –£–±–∏—Ä–∞–µ–º encoding="jsonParsed" –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    resp = client.get_token_accounts_by_owner(
        pubkey,
        TokenAccountOpts(program_id=TOKEN_PROGRAM_ID)
    )

    if resp.value:
        for acc in resp.value:
            try:
                # –ü–æ–ª—É—á–∞–µ–º mint-–∞–¥—Ä–µ—Å –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
                account_info = client.get_account_info(acc.pubkey)
                if account_info.value:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é
                    mint_address = parse_token_account_data(account_info.value.data)
                    if not mint_address:
                        continue
                else:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
                balance_resp = client.get_token_account_balance(acc.pubkey)
                if not balance_resp.value:
                    continue

                token_amount = balance_resp.value.ui_amount or 0

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                token_info = get_token_name_by_mint(mint_address, network)

                tokens.append({
                    "mint": mint_address,
                    "name": token_info["name"],
                    "symbol": token_info["symbol"],
                    "amount": token_amount,
                    "account": str(acc.pubkey)
                })

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞ {acc.pubkey}: {e}")
                continue

    return tokens


if __name__ == "__main__":
    wallet = load_wallet("file", "../wallet.json", network="mainnet")

    print("üîπ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:")
    sol_balance = get_sol_balance(wallet.pubkey(), "mainnet")
    print(f"   SOL: {sol_balance:.5f}")

    spl_balances = get_spl_tokens(wallet.pubkey(), "mainnet")
    if spl_balances:
        print("   SPL —Ç–æ–∫–µ–Ω—ã:")
        for token in spl_balances:
            print(f"    ‚Ä¢ {token['symbol']} ({token['name']}): {token['amount']}")
    else:
        print("   –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ SPL –≤ –∫–æ—à–µ–ª—å–∫–µ.")