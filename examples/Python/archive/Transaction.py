from Wallet import load_wallet
from solders.transaction import Transaction
from solders.system_program import transfer, TransferParams
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.message import Message

RPC_ENDPOINTS = {
    "devnet": "https://api.devnet.solana.com",
    "mainnet": "https://api.mainnet-beta.solana.com",
}


def send_sol(sender_kp: Keypair, recipient: str, amount_sol: float, network="devnet"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SOL —Å –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π.
    """
    client = get_connection(network)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
    blockhash_resp = client.get_latest_blockhash()
    recent_blockhash = blockhash_resp.value.blockhash

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ix = transfer(
        TransferParams(
            from_pubkey=sender_kp.pubkey(),
            to_pubkey=Pubkey.from_string(recipient),
            lamports=int(amount_sol * 1_000_000_000)
        )
    )

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = Message.new_with_blockhash(
        [ix],
        sender_kp.pubkey(),
        recent_blockhash
    )

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    tx = Transaction.new_unsigned(message)

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    tx.sign([sender_kp], recent_blockhash)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å send_transaction, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    resp = client.send_transaction(tx)
    print(f"‚úÖ Transaction sent! TxID: {resp.value}")
    return resp.value


# üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    wallet = load_wallet("file", "../wallet.json", network="devnet")
    recipient_address = "recipient_address"
    send_sol(wallet, recipient_address, 0.01, network="devnet")

