#######################################################################################################
# –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –µ—â–µ –Ω–µ —É—á—Ç–µ–Ω –≤ —Ñ–∞–π–ª–∞—Ö –æ–±—É—á–µ–Ω–∏—è –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#######################################################################################################


from solders.pubkey import Pubkey
from Wallet import load_wallet
from Connect import get_connection
from solana.rpc.types import TokenAccountOpts
from bip_utils import base58
import time


def get_sol_balance(pubkey: Pubkey, network="devnet") -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å SOL –≤ –∫–æ—à–µ–ª—å–∫–µ.
    """
    client = get_connection(network)
    resp = client.get_balance(pubkey)
    if resp.value is not None:
        return resp.value / 1_000_000_000  # –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –ª–∞–º–ø–æ—Ä—Ç–æ–≤ –≤ SOL
    return 0.0


def get_token_name_by_mint(mint_address: str, network="devnet"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ –µ–≥–æ mint-–∞–¥—Ä–µ—Å—É.
    """
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Solana
    MAINNET_TOKENS = {
        "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": {"symbol": "USDC", "name": "USD Coin"},
        "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": {"symbol": "USDT", "name": "Tether USD"},
        "So11111111111111111111111111111111111111112": {"symbol": "wSOL", "name": "Wrapped SOL"},
        "SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt": {"symbol": "SRM", "name": "Serum"},
        "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R": {"symbol": "RAY", "name": "Raydium"},
        "kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6": {"symbol": "KIN", "name": "Kin"},
        "MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K": {"symbol": "MER", "name": "Mercurial"},
        "9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E": {"symbol": "BTC", "name": "Wrapped Bitcoin"},
        "2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk": {"symbol": "ETH", "name": "Wrapped Ethereum"},
        "AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3": {"symbol": "FTT", "name": "FTX Token"},
        "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So": {"symbol": "mSOL", "name": "Marinade Staked SOL"},
        "7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj": {"symbol": "stSOL", "name": "Lido Staked SOL"},
        "HZ1JovNiVvGrGNiiYvEozEVgZ58xaU3RKwX8eACQBCt3": {"symbol": "pSOL", "name": "Parasol"},
        "CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG": {"symbol": "LINK", "name": "Chainlink"},
        "HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK": {"symbol": "HXRO", "name": "HXRO"},
        "EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp": {"symbol": "FIDA", "name": "Bonfida"},
        "ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx": {"symbol": "ATLAS", "name": "Star Atlas"},
        "poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk": {"symbol": "POLIS", "name": "Star Atlas DAO"},
        "SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp": {"symbol": "SLND", "name": "Solend"},
    }

    token_list = MAINNET_TOKENS

    if mint_address in token_list:
        return token_list[mint_address]

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π mint
    return {"symbol": f"{mint_address[:4]}...{mint_address[-4]}", "name": "Unknown Token"}


def parse_token_account_data(data):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç mint-–∞–¥—Ä–µ—Å –∏—Å–ø–æ–ª—å–∑—É—è bip_utils.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        # Mint address –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–º–µ—â–µ–Ω–∏—é 0, –¥–ª–∏–Ω–∞ 32 –±–∞–π—Ç–∞
        if len(data) >= 32:
            mint_bytes = data[:32]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º base58 –∏–∑ bip_utils
            mint_address = base58.Base58Encoder.Encode(mint_bytes)
            return mint_address
    except Exception:
        # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
        pass

    return None


def get_spl_tokens(pubkey: Pubkey, network="devnet", mint_filter=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ SPL-—Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ.
    """
    try:
        client = get_connection(network)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏: {e}")
        return []

    tokens = []
    successful_count = 0
    error_count = 0

    TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")

    try:
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        time.sleep(0.2)
        resp = client.get_token_accounts_by_owner(
            pubkey,
            TokenAccountOpts(program_id=TOKEN_PROGRAM_ID)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return tokens

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    mint_filter_list = None
    if isinstance(mint_filter, str):
        mint_filter_list = [mint_filter]
    elif isinstance(mint_filter, (list, tuple, set)):
        mint_filter_list = list(mint_filter)

    if not resp.value:
        print("–ù–µ—Ç —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
        return tokens

    total_accounts = len(resp.value)
    print(f"–ù–∞–π–¥–µ–Ω–æ {total_accounts} —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    for i, acc in enumerate(resp.value):
        try:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i > 0:
                time.sleep(0.3)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = client.get_account_info(acc.pubkey)
            if not account_info.value:
                error_count += 1
                continue

            # –ü–∞—Ä—Å–∏–º mint-–∞–¥—Ä–µ—Å
            mint_address = parse_token_account_data(account_info.value.data)
            if not mint_address:
                error_count += 1
                continue

            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –µ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º
            if mint_filter_list and mint_address not in mint_filter_list:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
            balance_resp = client.get_token_account_balance(acc.pubkey)
            if not balance_resp.value:
                error_count += 1
                continue

            token_amount = balance_resp.value.ui_amount or 0

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            if token_amount == 0:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = get_token_name_by_mint(mint_address, network)

            tokens.append({
                "mint": mint_address,
                "name": token_info["name"],
                "symbol": token_info["symbol"],
                "amount": token_amount,
                "account": str(acc.pubkey)
            })

            successful_count += 1

        except Exception:
            # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º
            error_count += 1
            continue

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}, —Å –æ—à–∏–±–∫–∞–º–∏: {error_count}")

    return tokens


def get_token_balance_simple(pubkey: Pubkey, mint_address: str, network="devnet"):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
    """
    try:
        # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        time.sleep(2)

        client = get_connection(network)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        mint_pubkey = Pubkey.from_string(mint_address)

        # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞
        resp = client.get_token_accounts_by_owner(
            pubkey,
            TokenAccountOpts(mint=mint_pubkey)
        )

        if resp.value and len(resp.value) > 0:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            balance_resp = client.get_token_account_balance(resp.value[0].pubkey)
            if balance_resp.value:
                token_amount = balance_resp.value.ui_amount or 0
                token_info = get_token_name_by_mint(mint_address, network)

                return {
                    "mint": mint_address,
                    "name": token_info["name"],
                    "symbol": token_info["symbol"],
                    "amount": token_amount,
                    "account": str(resp.value[0].pubkey)
                }

        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å
        token_info = get_token_name_by_mint(mint_address, network)
        return {
            "mint": mint_address,
            "name": token_info["name"],
            "symbol": token_info["symbol"],
            "amount": 0.0,
            "account": None
        }

    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        token_info = get_token_name_by_mint(mint_address, network)
        return {
            "mint": mint_address,
            "name": token_info["name"],
            "symbol": token_info["symbol"],
            "amount": 0.0,
            "account": None
        }


if __name__ == "__main__":
    wallet = load_wallet("file", "../wallet.json", network="mainnet")
    wallet_pubkey = wallet.pubkey()

    print("üîπ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:")
    sol_balance = get_sol_balance(wallet_pubkey, "mainnet")
    print(f"   SOL: {sol_balance:.5f}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SPL-—Ç–æ–∫–µ–Ω—ã
    print("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ SPL-—Ç–æ–∫–µ–Ω–æ–≤...")
    spl_balances = get_spl_tokens(wallet_pubkey, "mainnet")

    if spl_balances:
        print("   SPL —Ç–æ–∫–µ–Ω—ã:")
        for token in spl_balances:
            print(f"    ‚Ä¢ {token['symbol']} ({token['name']}): {token['amount']}")
    else:
        print("   –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ SPL –≤ –∫–æ—à–µ–ª—å–∫–µ.")

    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    print("\nüîπ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å):")

    # USDT - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    print("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å USDT...")
    usdt_balance = get_token_balance_simple(wallet_pubkey, "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB", "mainnet")
    print(f"   USDT: {usdt_balance['amount']}")

    # wSOL - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    print("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å wSOL...")
    wsol_balance = get_token_balance_simple(wallet_pubkey, "So11111111111111111111111111111111111111112", "mainnet")
    print(f"   wSOL: {wsol_balance['amount']}")

    # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∂–µ–º –±–∞–ª–∞–Ω—Å USDT –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if spl_balances:
        usdt_in_list = next((t for t in spl_balances if t['mint'] == "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB"),
                            None)
        if usdt_in_list:
            print(f"   USDT (–∏–∑ —Å–ø–∏—Å–∫–∞): {usdt_in_list['amount']}")

        wsol_in_list = next((t for t in spl_balances if t['mint'] == "So11111111111111111111111111111111111111112"),
                            None)
        if wsol_in_list:
            print(f"   wSOL (–∏–∑ —Å–ø–∏—Å–∫–∞): {wsol_in_list['amount']}")